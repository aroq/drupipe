params:
  actions:
    processors:
      from:
        # defines in which mode 'from' should be processed.
        mode: execute
    params:
      action_timeout: 120
      store_result: true
      dump_result: true
      store_action_params: true
      store_result_key: context.results.action.${action.name}_${action.methodName}
      hooks: ['params']
      # Result post process
      result_post_process:
        result:
          type: result
          source: result
          destination: ${action.params.store_result_key}
      # Action params processing
#      params_processing:
#        flags: ['result_post_process']
#        full_command: ['final_process']
      store_action_params_key: actions.${action.name}_${action.methodName}
      shell_bash_login: true
      return_stdout: false
      # To be used when specific action's class is not exists.
      fallback_class_name: BaseShellAction

    Config:
      params:
        result_post_process:
          context:
            type: result
            source: result
            destination: context
          # Unset parent params.
          result:

      perform:
        params:
          result_post_process: []

      mothershipConfig:
        params:
          mothershipConfigFile: mothership.config
          result_post_process:
            result:
              type: result
              source: result.configRepo
              destination: context.configRepo

    GroovyFileConfig:
      params:
        result_post_process:
          # Unset parent params.
          result:

    YamlFileConfig:
      params:
        result_post_process:
          # Unset parent params.
          result:

    Source:
      params:
        result_post_process:
          # Unset parent params.
          result:
      add:
        params:
          result_post_process:
            context:
              type: result
              source: result
              destination: context

    Behat:
      params:
        masterPath: docroot/master
        masterRelativePath: ..
        behatExecutable: bin/behat
        pathToEnvironmentConfig: code/common
        workspaceRelativePath: ../../..
        behat_args: --format=pretty --out=std --format=junit

    Terraform:
      params:
        infraSourceName: infra-config
        shell_bash_login: false

    Drush:
      params:
        return_stdout: true

    DrushFeaturesList:
      params:
        return_stdout: true

    Docman:
      params:
        docmanJsonConfigFile: config.json
        build_type: git_target

      stripedBuild:
        params:
          build_type: striped
          state: stable

      releaseBuild:
        params:
          state: stable

    Gitlab:
      acceptMR:
        params:
          message: MR merged as pipeline was executed successfully.

    Publish:
      junit:
        params:
          reportsPath: reports/*.xml

    JobDslSeed:
      perform:
        params:
          dsl_params:
            removedJobAction: DELETE
            removedViewAction: DELETE
            lookupStrategy: SEED_JOB
            additionalClasspath:
              - .unipipe/library/src
            jobsPattern:
              - .unipipe/library/jobdsl/seed/*.groovy

    Druflow:
      params:
        druflowDir: druflow
        druflowRepo: https://github.com/aroq/druflow.git
        druflowGitReference: v0.1.4

      operations:
        params:
          propertiesFile: docroot/master/version.properties
          installDruflow: false
          executeCommand: deployFlow
          druflowDir: /app/druflow

      deploy:
        params:
          propertiesFile: docroot/master/version.properties
          installDruflow: false
          executeCommand: deployTag
          druflowDir: /app/druflow

      deployFlow:
        params:
          propertiesFile: docroot/master/version.properties
          installDruflow: false
          executeCommand: deployFlow
          druflowDir: /app/druflow

      copySite:
        params:
          executeCommand: dbCopyAC

      dbBackupSite:
        params:
          executeCommand: dbBackupSite

      getGitRepo:
        params:
          executeCommand: gitGetRepo

    Ansible:
      params:
        playbooksDir: .unipipe/library/ansible
        playbook: deployWithAnsistrano.yml
        playbookParams:
          ansistrano_deploy_via: rsync

      deployWithGit:
        params:
          playbook: deployWithGit.yml

      deployWithAnsistrano:
        params:
          playbook: deployWithAnsistrano.yml
          playbookParams:
            ansistrano_deploy_via: rsync
            ansistrano_deploy_from: docroot/master

    Common:
      confirm:
        params:
          timeToConfirm: 60

    PipelineController:
      params:
        buildHandler:
          method: build
        deployHandler:
          method: deploy
        artifactHandler:
          handler: GitArtifact
          method: retrieve
        operationsHandler:
          method: operations

    GitArtifact:
      params:
        dir: artifacts
        repoDirName: master

    Git:
      params:
        singleBranch: true
        depth: 1

    YamlFileHandler:
      params:
        deployFile: unipipe.y*ml

    GCloud:
      params:
        dump_result: true
        executable: gcloud
        kubectl_config_file: .kubeconfig
        env:
          KUBECONFIG: ${context.drupipe_working_dir}/${action.params.kubectl_config_file}
        access_key_file_id: GCLOUD_ACCESS_KEY
        shell_bash_login: false
        credentials:
          secret_values_file:
            type: file
            id: ${action.params.access_key_file_id}
        compute_zone: ''
        project_name: zebra-cicd
        cluster_name: main

    Jenkins:
      params:
        shell_bash_login: false

      build:
        params:
          jenkins_user_token_file: ''
          jenkins_address_prefix: 'http'
          jenkins_address_host: ''
          jenkins_address: ${action.params.jenkins_address_prefix}://${action.params.jenkins_address_host}
          jenkins_user_token: ''
      seedTest:
        params:
          jenkins_user_token_file: ''
          jenkins_address_prefix: 'http'
          jenkins_address_host: ''
          jenkins_address: ${action.params.jenkins_address_prefix}://${action.params.jenkins_address_host}
          jenkins_user_token: ''

    Helm:
      params:
        executable: helm
        chart_name: ''
        chart_prefix: ''
        chart: ${action.params.chart_prefix}/${action.params.chart_name}
        release_name: ${action.params.chart_name}-${context.environment}
        kubectl_config_file: .kubeconfig
        shell_bash_login: false
        namespace: ${action.params.chart_name}-${context.environment}
        env:
          KUBECONFIG: ${context.drupipe_working_dir}/${action.params.kubectl_config_file}
        result_post_process:
          namespace:
            type: result
            source: params.namespace
            destination: context.k8s.namespace
          release_name:
            type: result
            source: params.release_name
            destination: context.k8s.release_name

      init:
        params:
          command: init
          full_command:
            - ${action.params.executable}
            - ${action.params.command}

      apply:
        params:
          hooks: ['process']
          params_processing:
            full_command: ['process']
          command: upgrade
          value_suffix: values.yaml
          timeout: '120'
          values_file: ${action.params.chart_name}.${action.params.value_suffix}
          env_values_file: ${context.environment}.${action.params.values_file}
          secret_values_file_id: ''
          secret_values_file: ''
          credentials:
            secret_values_file:
              type: file
              id: ${action.params.secret_values_file_id}
          flags:
            --install:
              - ''
            --wait:
              - ''
            --timeout:
              - ${action.params.timeout}
            --namespace:
              - ${action.params.namespace}
            -f:
              - ${action.params.values_file}
              - ${action.params.env_values_file}
              - ${action.params.secret_values_file}
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${prepareFlags(action.params.flags)}
            - ${action.params.release_name}
            - ${action.params.chart}

      status:
        params:
          command: status
          flags: {}
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${action.params.release_name}

      delete:
        params:
          command: delete
          flags:
            --purge:
              - ''
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${prepareFlags(action.params.flags)}
            - ${action.params.release_name}

    Kubectl:
      params:
        executable: kubectl
        kubectl_config_file: .kubeconfig
        shell_bash_login: false
        namespace: ${context.k8s.namespace}
        env:
          KUBECONFIG: ${context.drupipe_working_dir}/${action.params.kubectl_config_file}

      scale_replicaset:
        params:
          command: scale replicaset
          replicas: ''
          replicaset_name: ''
          flags:
            --replicas:
              - ${action.params.replicas}
            --namespace:
              - ${action.params.namespace}
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${prepareFlags(action.params.flags)}
            - ${action.params.replicaset_name}

      scale_down_up:
        params:
          replicas_down: '0'
          replicas_up: '1'

      get_replicaset_name:
        params:
          command: get replicaset
          release_name: ${actions.Helm_status.release_name}
          jsonpath: '{.items[0].metadata.name}'
          return_stdout: true
          selector: component=${context.k8s.release_name}-${action.params.template_name}
          flags:
            --namespace:
              - ${action.params.namespace}
            --selector:
              - ${action.params.selector}
            -o:
              - jsonpath=${action.params.jsonpath}
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${prepareFlags(action.params.flags)}

      get_pod_name:
        params:
          command: get pod
          release_name: ${actions.Helm_status.release_name}
          jsonpath: '{.items[0].metadata.name}'
          return_stdout: true
          # TODO: Redo it.
          selector: component=${context.k8s.release_name}-${action.params.template_name}
          flags:
            --namespace:
              - ${action.params.namespace}
            --selector:
              - ${action.params.selector}
            -o:
              - jsonpath=${action.params.jsonpath}
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${prepareFlags(action.params.flags)}

      get_pods:
        params:
          command: get pods
          flags:
            --namespace:
              - ${action.params.namespace}
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${prepareFlags(action.params.flags)}

      get_address_lb:
        params:
          command: get service
          release_name: ${actions.Helm_status.release_name}
          jsonpath: '''{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[?(@.name=="http")].port}'''
          return_stdout: true
          selector: component=${context.k8s.release_name}-${action.params.template_name}
          result_post_process:
            jenkins_address:
              type: result
              source: result.stdout
              destination: context.k8s.address
          flags:
            --namespace:
              - ${action.params.namespace}
            --selector:
              - ${action.params.selector}
            -o:
              - jsonpath=${action.params.jsonpath}
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${prepareFlags(action.params.flags)}

      get_address_ingress:
        params:
          command: get ingress
          release_name: ${actions.Helm_status.release_name}
          jsonpath: '''{.items[0].spec.rules[0].host}'''
          return_stdout: true
          result_post_process:
            jenkins_address:
              type: result
              source: result.stdout
              destination: context.k8s.address
          flags:
            --namespace:
              - ${action.params.namespace}
            -o:
              - jsonpath=${action.params.jsonpath}
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${prepareFlags(action.params.flags)}

      get_address_cluster_ip:
        params:
          command: get service
          release_name: ${actions.Helm_status.release_name}
          jsonpath: '''{.spec.clusterIP}:{.spec.ports[?(@.name=="http")].port}'''
          return_stdout: true
          service_name: ${action.params.release_name}-${action.params.template_name}
          result_post_process:
            jenkins_address:
              type: result
              source: result.stdout
              destination: context.k8s.address
          flags:
            --namespace:
              - ${action.params.namespace}
            -o:
              - jsonpath=${action.params.jsonpath}
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${action.params.service_name}
            - ${prepareFlags(action.params.flags)}

      copy_from_pod:
        params:
          command: cp
          pod_name: ''
          source_file_name: ''
          source: ${context.k8s.namespace}/${action.params.pod_name}:${action.params.source_file_name}
          destination: ''
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${action.params.source}
            - ${action.params.destination}

      get_pod_logs:
        params:
          command: logs
          pod_name: ''
          flags:
            --namespace:
              - ${action.params.namespace}
            --tail:
              - ${action.params.options.tail}
          options:
            tail: 500
          full_command:
            - ${action.params.executable}
            - ${action.params.command}
            - ${action.params.pod_name}
            - ${prepareFlags(action.params.flags)}

    HealthCheck:
      wait_http_ok:
        params:
          action_timeout: 5
          url: ''
          http_code: '200'
          interval: '5'
          command: 'bash -c ''while [[ "\$(curl -s -o /dev/null -w ''''%{http_code}''''
                   ${action.params.url})" != "${action.params.http_code}" ]]; do sleep ${action.params.interval};
                   done'' '
          full_command:
            - ${action.params.command}

    Ssh:
      tunnel:
        params:
          executable: ssh
          options: -f -N -L
          bind_address: 127.0.0.1
          port: 22
          host: ""
          hostport: 22
          through_host: ""
          full_command:
            - ${action.params.executable}
            - ${action.params.options}
            - ${action.params.bind_address}:${action.params.port}:${action.params.host}:${action.params.hostport}
            - ${action.params.through_host}

    Commands:
      params:
        log_level: TRACE
        actions: []
        aggregate_commands: true
        through_ssh_params:
          executable: ssh
          options: -T

    Cap:
      params:
        executable: bundle exec cap
        environment: ""
        branch: ""
        options: ""
        full_command: ${action.params.executable} ${action.params.environment} ${action.params.verb_command} ${action.params.branch} ${action.params.options}
      deploy:
        params:
          verb_command: deploy
