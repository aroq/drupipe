params:
  actions:
    __default:
      action_timeout: 120
      store_result: true
      dump_result: true
      store_action_params: true
      store_result_key: context.results.action.${action.name}_${action.methodName}
      post_process:
        result:
          type: result
          source: result
          destination: ${action.params.store_result_key}
      store_action_params_key: actions.${action.name}_${action.methodName}
      shell_bash_login: true
      return_stdout: false

    Config:
      __default:
        post_process:
          context:
            type: result
            source: result
            destination: context

      perform:
        post_process: []

      mothershipConfig:
        mothershipConfigFile: mothership.config
        post_process:
          result:
            type: result
            source: result.configRepo
            destination: context.configRepo

    Source:
      add:
        post_process:
          context:
            type: result
            source: result
            destination: context

    Behat:
      __default:
        masterPath: docroot/master
        masterRelativePath: ..
        behatExecutable: bin/behat
        pathToEnvironmentConfig: code/common
        workspaceRelativePath: ../../..
        behat_args: --format=pretty --out=std --format=junit

    Terraform:
      __default:
        infraSourceName: infra-config
        shell_bash_login: false

    Drush:
      __default:
        return_stdout: true

    DrushFeaturesList:
      __default:
        return_stdout: true

    Docman:
      __default:
        docmanJsonConfigFile: config.json
        build_type: git_target

      stripedBuild:
        build_type: striped
        state: stable

      releaseBuild:
        state: stable

    Gitlab:
      acceptMR:
        message: MR merged as pipeline was executed successfully.

    Publish:
      junit:
        reportsPath: reports/*.xml

    JobDslSeed:
      perform:
        removedJobAction: DELETE
        removedViewAction: DELETE
        lookupStrategy: SEED_JOB
        additionalClasspath:
          - .unipipe/library/src
        jobsPattern:
          - .unipipe/library/jobdsl/seed/*.groovy

    Druflow:
      __default:
        druflowDir: druflow
        druflowRepo: https://github.com/aroq/druflow.git
        druflowGitReference: v0.1.3

      operations:
        propertiesFile: docroot/master/version.properties
        executeCommand: deployFlow

      deploy:
        propertiesFile: docroot/master/version.properties
        executeCommand: deployTag

      deployFlow:
        propertiesFile: docroot/master/version.properties
        executeCommand: deployFlow

      copySite:
        executeCommand: dbCopyAC

      dbBackupSite:
        executeCommand: dbBackupSite

      getGitRepo:
        executeCommand: gitGetRepo

    Ansible:
      __default:
        playbooksDir: .unipipe/library/ansible
        playbook: deployWithAnsistrano.yml
        playbookParams:
          ansistrano_deploy_via: rsync

      deployWithGit:
        playbook: deployWithGit.yml

      deployWithAnsistrano:
        playbook: deployWithAnsistrano.yml
        playbookParams:
          ansistrano_deploy_via: rsync
          ansistrano_deploy_from: docroot/master

    Common:
      confirm:
        timeToConfirm: 60

    PipelineController:
      __default:
        buildHandler:
          method: build
        deployHandler:
          method: deploy
        artifactHandler:
          handler: GitArtifact
          method: retrieve
        operationsHandler:
          method: operations

    GitArtifact:
      __default:
        dir: artifacts
        repoDirName: master

    Git:
      __default:
        singleBranch: true
        depth: 1

    YamlFileHandler:
      __default:
        deployFile: unipipe.y*ml

    GCloud:
      __default:
        debugEnabled: true
        dump_result: true
        executable: gcloud
        kubectl_config_file: .kubeconfig
        env:
          KUBECONFIG: ${context.drupipe_working_dir}/${action.params.kubectl_config_file}
        access_key_file_id: GCLOUD_ACCESS_KEY
        shell_bash_login: false
        credentials:
          secret_values_file:
            type: file
            id: ${action.params.access_key_file_id}
        compute_zone: ''
        project_name: zebra-cicd
        cluster_name: main

    Jenkins:
      __default:
        shell_bash_login: false

      build:
        shell_bash_login: false
        jenkins_user_token_file: ''
        jenkins_address: ''
        jenkins_user_token: ''

    Helm:
      __default:
        executable: helm
        chart_name: zebra-cd
        release_name: ${action.params.chart_name}-${context.environment}
        charts_dir: charts
        kubectl_config_file: .kubeconfig
        shell_bash_login: false
        namespace: ${action.params.chart_name}-${context.environment}
        env:
          KUBECONFIG: ${context.drupipe_working_dir}/${action.params.kubectl_config_file}
        post_process:
          namespace:
            type: result
            source: params.namespace
            destination: context.k8s.namespace
          release_name:
            type: result
            source: params.release_name
            destination: context.k8s.selector

      init:
        command: init
        full_command:
        - ${action.params.executable}
        - ${action.params.command}

      apply:
        debugEnabled: true
        command: upgrade
        value_suffix: values.yaml
        timeout: '120'
        values_file: ${action.params.chart_name}.${action.params.value_suffix}
        env_values_file: ${context.environment}.${action.params.values_file}
        secret_values_file_id: HELM_ZEBRA_SECRETS_FILE
        secret_values_file: \$${action.params.secret_values_file_id}
        chart_dir: ${action.params.charts_dir}/${action.params.chart_name}
        credentials:
          secret_values_file:
            type: file
            id: ${action.params.secret_values_file_id}
        flags:
          --install:
          - ''
          --wait:
          - ''
          --timeout:
          - ${action.params.timeout}
          --namespace:
          - ${action.params.namespace}
          -f:
          - ${action.params.values_file}
          - ${action.params.env_values_file}
          - ${action.params.secret_values_file}
        full_command:
        - ${action.params.executable}
        - ${action.params.command}
        - ${prepareFlags(action.params.flags)}
        - ${action.params.release_name}
        - ${action.params.chart_dir}

      status:
        command: status
        flags: {}
        full_command:
        - ${action.params.executable}
        - ${action.params.command}
        - ${action.params.release_name}

      delete:
        command: delete
        flags:
          --purge:
          - ''
        full_command:
        - ${action.params.executable}
        - ${action.params.command}
        - ${prepareFlags(action.params.flags)}
        - ${action.params.release_name}

    Kubectl:
      __default:
        executable: kubectl
        kubectl_config_file: .kubeconfig
        shell_bash_login: false
        namespace: ${context.k8s.namespace}
        env:
          KUBECONFIG: ${context.drupipe_working_dir}/${action.params.kubectl_config_file}

      scale_replicaset:
        command: scale replicaset
        replicas: ''
        name: ''
        flags:
          --replicas:
          - ${action.params.replicas}
          --namespace:
          - ${action.params.namespace}
        full_command:
        - ${action.params.executable}
        - ${action.params.command}
        - ${prepareFlags(action.params.flags)}
        - ${action.params.name}

      scale_down_up:
        replicas_down: '0'
        replicas_up: '1'

      get_replicaset_name:
        command: get replicaset
        release_name: ${actions.Helm_status.release_name}
        jsonpath: '''{.items[0].metadata.name}'''
        return_stdout: true
        selector: release=${context.k8s.selector}
        flags:
          --namespace:
          - ${action.params.namespace}
          --selector:
          - ${action.params.selector}
          -o:
          - jsonpath=${action.params.jsonpath}
        full_command:
        - ${action.params.executable}
        - ${action.params.command}
        - ${prepareFlags(action.params.flags)}

      get_pod_name:
        command: get pod
        release_name: ${actions.Helm_status.release_name}
        jsonpath: '''{.items[0].metadata.name}'''
        return_stdout: true
        selector: release=${context.k8s.selector}
        flags:
          --namespace:
          - ${action.params.namespace}
          --selector:
          - ${action.params.selector}
          -o:
          - jsonpath=${action.params.jsonpath}
        full_command:
        - ${action.params.executable}
        - ${action.params.command}
        - ${prepareFlags(action.params.flags)}

      get_pods:
        command: get pods
        flags:
          --namespace:
          - ${action.params.namespace}
        full_command:
        - ${action.params.executable}
        - ${action.params.command}
        - ${prepareFlags(action.params.flags)}

      get_loadbalancer_address:
        command: get service
        release_name: ${actions.Helm_status.release_name}
        jsonpath: '''{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[?(@.name=="http")].port}'''
        return_stdout: true
        selector: release=${context.k8s.selector}
        flags:
          --namespace:
          - ${action.params.namespace}
          --selector:
          - ${action.params.selector}
          -o:
          - jsonpath=${action.params.jsonpath}
        full_command:
        - ${action.params.executable}
        - ${action.params.command}
        - ${prepareFlags(action.params.flags)}

      copy_from_pod:
        command: cp
        name: ''
        source_file_name: ''
        source: ${context.k8s.namespace}/${action.params.name}:${action.params.source_file_name}
        destination: ''
        full_command:
        - ${action.params.executable}
        - ${action.params.command}
        - ${action.params.source}
        - ${action.params.destination}

      get_pod_logs:
        command: logs
        name: ''
        flags:
          --namespace:
          - ${action.params.namespace}
        full_command:
        - ${action.params.executable}
        - ${action.params.command}
        - ${action.params.name}
        - ${prepareFlags(action.params.flags)}

    HealthCheck:
      wait_http_ok:
        action_timeout: 5
        url: ''
        http_code: '200'
        interval: '5'
        command: 'bash -c ''while [[ "\$(curl -s -o /dev/null -w ''''%{http_code}''''
          ${action.params.url})" != "${action.params.http_code}" ]]; do sleep ${action.params.interval};
          done'' '
        full_command:
        - ${action.params.command}

